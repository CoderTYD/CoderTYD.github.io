<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>唐半仙</title>
  <subtitle>iOS 开发工程师</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-31T14:47:21.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>唐半仙丶</name>
    <email>leader6881@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS常用宏定义</title>
    <link href="http://yoursite.com/2016/07/03/iOS%E5%B8%B8%E7%94%A8%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
    <id>http://yoursite.com/2016/07/03/iOS常用宏定义/</id>
    <published>2016-07-03T12:46:25.000Z</published>
    <updated>2016-08-31T14:47:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-获取屏幕宽度与高度"><a href="#1-获取屏幕宽度与高度" class="headerlink" title="1.获取屏幕宽度与高度"></a>1.获取屏幕宽度与高度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#define SCREEN_WIDTH   [UIScreen mainScreen].bounds.size.width</div><div class="line">#define SCREENH_HEIGHT [UIScreen mainScreen].bounds.size.height</div></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="需要横屏或者竖屏，获取屏幕宽度与高度"><a href="#需要横屏或者竖屏，获取屏幕宽度与高度" class="headerlink" title="需要横屏或者竖屏，获取屏幕宽度与高度"></a>需要横屏或者竖屏，获取屏幕宽度与高度</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt;= 80000 // 当前Xcode支持iOS8及以上</div><div class="line"></div><div class="line">#define SCREEN_WIDTH ([[UIScreen mainScreen] respondsToSelector:@selector(nativeBounds)]?[UIScreen mainScreen].nativeBounds.size.width/[UIScreen mainScreen].nativeScale:[UIScreen mainScreen].bounds.size.width)</div><div class="line"></div><div class="line">#define SCREENH_HEIGHT ([[UIScreen mainScreen] respondsToSelector:@selector(nativeBounds)]?[UIScreen mainScreen].nativeBounds.size.height/[UIScreen mainScreen].nativeScale:[UIScreen mainScreen].bounds.size.height)</div><div class="line"></div><div class="line">#define SCREEN_SIZE ([[UIScreen mainScreen] respondsToSelector:@selector(nativeBounds)]?CGSizeMake([UIScreen mainScreen].nativeBounds.size.width/[UIScreen mainScreen].nativeScale,[UIScreen mainScreen].nativeBounds.size.height/[UIScreen mainScreen].nativeScale):[UIScreen mainScreen].bounds.size)</div><div class="line">#else</div><div class="line">#define SCREEN_WIDTH [UIScreen mainScreen].bounds.size.width</div><div class="line">#define SCREENH_HEIGHT [UIScreen mainScreen].bounds.size.height</div><div class="line">#define SCREEN_SIZE [UIScreen mainScreen].bounds.size</div><div class="line">#endif</div></pre></td></tr></table></figure>
<h3 id="2-获取通知中心"><a href="#2-获取通知中心" class="headerlink" title="2.获取通知中心"></a>2.获取通知中心</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define TYDNotificationCenter [NSNotificationCenter defaultCenter]</div></pre></td></tr></table></figure>
<h3 id="3-设置随机颜色"><a href="#3-设置随机颜色" class="headerlink" title="3.设置随机颜色"></a>3.设置随机颜色</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define TYDRandomColor [UIColor colorWithRed:arc4random_uniform(256)/255.0 green:arc4random_uniform(256)/255.0 blue:arc4random_uniform(256)/255.0 alpha:1.0]</div></pre></td></tr></table></figure>
<h3 id="4-设置RGB颜色-设置RGBA颜色"><a href="#4-设置RGB颜色-设置RGBA颜色" class="headerlink" title="4.设置RGB颜色/设置RGBA颜色"></a>4.设置RGB颜色/设置RGBA颜色</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#define TYDRGBColor(r, g, b) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:1.0]</div><div class="line">#define TYDGBAColor(r, g, b, a) [UIColor colorWithRed:(r)/255.0 green:(r)/255.0 blue:(r)/255.0 alpha:a]</div></pre></td></tr></table></figure>
<h4 id="clear背景颜色"><a href="#clear背景颜色" class="headerlink" title="clear背景颜色"></a>clear背景颜色</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define TYDClearColor [UIColor clearColor]</div></pre></td></tr></table></figure>
<h3 id="5-自定义高效率的-NSLog"><a href="#5-自定义高效率的-NSLog" class="headerlink" title="5.自定义高效率的 NSLog"></a>5.自定义高效率的 NSLog</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#ifdef DEBUG</div><div class="line">#define TYDLog(...) NSLog(@&quot;%s 第%d行 \n %@\n\n&quot;,__func__,__LINE__,[NSString stringWithFormat:__VA_ARGS__])</div><div class="line">#else</div><div class="line">#define TYDLog(...)</div><div class="line"></div><div class="line">#endif</div></pre></td></tr></table></figure>
<h3 id="6-弱引用-强引用"><a href="#6-弱引用-强引用" class="headerlink" title="6.弱引用/强引用"></a>6.弱引用/强引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#define TYDWeakSelf(type)  __weak typeof(type) weak##type = type;</div><div class="line">#define TYDStrongSelf(type)  __strong typeof(type) type = weak##type;</div></pre></td></tr></table></figure>
<h3 id="7-设置-view-圆角和边框"><a href="#7-设置-view-圆角和边框" class="headerlink" title="7.设置 view 圆角和边框"></a>7.设置 view 圆角和边框</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#define TYDLayer(View, Radius, Width, Color)\</div><div class="line">\</div><div class="line">[View.layer setCornerRadius:(Radius)];\</div><div class="line">[View.layer setMasksToBounds:YES];\</div><div class="line">[View.layer setBorderWidth:(Width)];\</div><div class="line">[View.layer setBorderColor:[Color CGColor]]</div></pre></td></tr></table></figure>
<h3 id="8-获取当前语言"><a href="#8-获取当前语言" class="headerlink" title="8.获取当前语言"></a>8.获取当前语言</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define TYDCurrentLanguage ([[NSLocale preferredLanguages] objectAtIndex:0])</div></pre></td></tr></table></figure>
<h3 id="9-使用-ARC-和-MRC"><a href="#9-使用-ARC-和-MRC" class="headerlink" title="9.使用 ARC 和 MRC"></a>9.使用 ARC 和 MRC</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#if __has_feature(objc_arc)</div><div class="line">// ARC</div><div class="line">#else</div><div class="line">// MRC</div><div class="line">#endif</div></pre></td></tr></table></figure>
<h3 id="10-判断当前的iPhone设备-系统版本"><a href="#10-判断当前的iPhone设备-系统版本" class="headerlink" title="10.判断当前的iPhone设备/系统版本"></a>10.判断当前的iPhone设备/系统版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">//判断是否为iPhone</div><div class="line">#define IS_IPHONE (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)</div><div class="line"></div><div class="line">//判断是否为iPad</div><div class="line">#define IS_IPAD (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)</div><div class="line"></div><div class="line">//判断是否为ipod</div><div class="line">#define IS_IPOD ([[[UIDevice currentDevice] model] isEqualToString:@&quot;iPod touch&quot;])</div><div class="line"></div><div class="line">// 判断是否为 iPhone 5SE</div><div class="line">#define iPhone5SE [[UIScreen mainScreen] bounds].size.width == 320.0f &amp;&amp; [[UIScreen mainScreen] bounds].size.height == 568.0f</div><div class="line"></div><div class="line">// 判断是否为iPhone 6/6s</div><div class="line">#define iPhone6_6s [[UIScreen mainScreen] bounds].size.width == 375.0f &amp;&amp; [[UIScreen mainScreen] bounds].size.height == 667.0f</div><div class="line"></div><div class="line">// 判断是否为iPhone 6Plus/6sPlus</div><div class="line">#define iPhone6Plus_6sPlus [[UIScreen mainScreen] bounds].size.width == 414.0f &amp;&amp; [[UIScreen mainScreen] bounds].size.height == 736.0f</div><div class="line"></div><div class="line">//获取系统版本</div><div class="line">#define IOS_SYSTEM_VERSION [[[UIDevice currentDevice] systemVersion] floatValue]</div><div class="line"></div><div class="line">//判断 iOS 8 或更高的系统版本</div><div class="line">#define IOS_VERSION_8_OR_LATER (([[[UIDevice currentDevice] systemVersion] floatValue] &gt;=8.0)? (YES):(NO))</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-获取屏幕宽度与高度&quot;&gt;&lt;a href=&quot;#1-获取屏幕宽度与高度&quot; class=&quot;headerlink&quot; title=&quot;1.获取屏幕宽度与高度&quot;&gt;&lt;/a&gt;1.获取屏幕宽度与高度&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#define SCREEN_WIDTH   [UIScreen mainScreen].bounds.size.width&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#define SCREENH_HEIGHT [UIScreen mainScreen].bounds.size.height&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="常用" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8/"/>
    
    
      <category term="宏定义" scheme="http://yoursite.com/tags/%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
    
  </entry>
  
  <entry>
    <title>AFNetworking封装</title>
    <link href="http://yoursite.com/2016/06/13/AFNetworking%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2016/06/13/AFNetworking二次封装/</id>
    <published>2016-06-13T12:46:25.000Z</published>
    <updated>2016-08-31T13:19:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p><code>AFNetworking</code>是一个非常方便的网络请求库，可以轻松实现各种网络请求，比如经常使用的GET请求、POST请求，以及上传多张图片等;</p>
<p>通常来说，<code>AFNetworking</code>已经是高度封装的了，在用到AFNetworking发请求的类里，我们直接可以调用.<br><code>AFNetworking</code>的API。但是，在实际开发中，我们常常将设备、版本、和账户等信息，在接口中作为参数集中提交<br>到服务器。而网络请求异常等信息，也希望集中处理。这时，在每个调用<code>AFNetworking</code>的地方分别处理就比较麻烦,<br>单独封装一个网略请求类，做集中处理，会跟方便管理，也便于复用和扩展。</p>
<hr>
<a id="more"></a>
<p>我最常用到的就是<code>get</code>,<code>post</code>,<code>upload</code>及<code>download</code>了。</p>
<p>说了这么多的废话了来点干货，直接上代码。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="1、封装方法"><a href="#1、封装方法" class="headerlink" title="1、封装方法"></a>1、封装方法</h4><p><strong>UploadParam.h文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface UploadParam : NSObject</div><div class="line">/**</div><div class="line"> *  图片的二进制数据</div><div class="line"> */</div><div class="line">@property (nonatomic, strong) NSData *data;</div><div class="line">/**</div><div class="line"> *  服务器对应的参数名称</div><div class="line"> */</div><div class="line">@property (nonatomic, copy) NSString *name;</div><div class="line">/**</div><div class="line"> *  文件的名称(上传到服务器后，服务器保存的文件名)</div><div class="line"> */</div><div class="line">@property (nonatomic, copy) NSString *filename;</div><div class="line">/**</div><div class="line"> *  文件的MIME类型(image/png,image/jpg等)</div><div class="line"> */</div><div class="line">@property (nonatomic, copy) NSString *mimeType;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p><strong>UploadParam.m文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#import &quot;UploadParam.h&quot;</div><div class="line"></div><div class="line">@implementation UploadParam</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p><strong>HttpRequest.h文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">@class UploadParam;</div><div class="line">/**</div><div class="line"> *  网络请求类型</div><div class="line"> */</div><div class="line">typedef NS_ENUM(NSUInteger,HttpRequestType) &#123;</div><div class="line">    /**</div><div class="line">     *  get请求</div><div class="line">     */</div><div class="line">    HttpRequestTypeGet = 0,</div><div class="line">    /**</div><div class="line">     *  post请求</div><div class="line">     */</div><div class="line">    HttpRequestTypePost</div><div class="line">&#125;;</div><div class="line"></div><div class="line">@interface HttpRequest : NSObject</div><div class="line"></div><div class="line">+ (instancetype)sharedInstance;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  发送get请求</div><div class="line"> *</div><div class="line"> *  @param URLString  请求的网址字符串</div><div class="line"> *  @param parameters 请求的参数</div><div class="line"> *  @param success    请求成功的回调</div><div class="line"> *  @param failure    请求失败的回调</div><div class="line"> */</div><div class="line">- (void)getWithURLString:(NSString *)URLString</div><div class="line">              parameters:(id)parameters</div><div class="line">                 success:(void (^)(id responseObject))success</div><div class="line">                 failure:(void (^)(NSError *error))failure;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  发送post请求</div><div class="line"> *</div><div class="line"> *  @param URLString  请求的网址字符串</div><div class="line"> *  @param parameters 请求的参数</div><div class="line"> *  @param success    请求成功的回调</div><div class="line"> *  @param failure    请求失败的回调</div><div class="line"> */</div><div class="line">- (void)postWithURLString:(NSString *)URLString</div><div class="line">               parameters:(id)parameters</div><div class="line">                  success:(void (^)(id responseObject))success</div><div class="line">                  failure:(void (^)(NSError *error))failure;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  发送网络请求</div><div class="line"> *</div><div class="line"> *  @param URLString   请求的网址字符串</div><div class="line"> *  @param parameters  请求的参数</div><div class="line"> *  @param type        请求的类型</div><div class="line"> *  @param resultBlock 请求的结果</div><div class="line"> */</div><div class="line">- (void)requestWithURLString:(NSString *)URLString</div><div class="line">                  parameters:(id)parameters</div><div class="line">                        type:(HttpRequestType)type</div><div class="line">                     success:(void (^)(id responseObject))success</div><div class="line">                     failure:(void (^)(NSError *error))failure;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  上传图片</div><div class="line"> *</div><div class="line"> *  @param URLString   上传图片的网址字符串</div><div class="line"> *  @param parameters  上传图片的参数</div><div class="line"> *  @param uploadParam 上传图片的信息</div><div class="line"> *  @param success     上传成功的回调</div><div class="line"> *  @param failure     上传失败的回调</div><div class="line"> */</div><div class="line">- (void)uploadWithURLString:(NSString *)URLString</div><div class="line">                 parameters:(id)parameters</div><div class="line">                uploadParam:(NSArray &lt;UploadParam *&gt; *)uploadParams</div><div class="line">                    success:(void (^)())success</div><div class="line">                    failure:(void (^)(NSError *error))failure;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  下载数据</div><div class="line"> *</div><div class="line"> *  @param URLString   下载数据的网址</div><div class="line"> *  @param parameters  下载数据的参数</div><div class="line"> *  @param success     下载成功的回调</div><div class="line"> *  @param failure     下载失败的回调</div><div class="line"> */</div><div class="line">- (void)downLoadWithURLString:(NSString *)URLString</div><div class="line">                   parameters:(id)parameters</div><div class="line">                     progerss:(void (^)())progress</div><div class="line">                      success:(void (^)())success</div><div class="line">                      failure:(void (^)(NSError *error))failure;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p><strong>HttpRequest.m文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#import &quot;HttpRequest.h&quot;</div><div class="line">#import &quot;AFNetworking.h&quot;</div><div class="line">#import &quot;UploadParam.h&quot;</div><div class="line"></div><div class="line">@implementation HttpRequest</div><div class="line"></div><div class="line">static id _instance = nil;</div><div class="line">+ (instancetype)sharedInstance &#123;</div><div class="line">    return [[self alloc] init];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (instancetype)allocWithZone:(struct _NSZone *)zone &#123;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        _instance = [super allocWithZone:zone];</div><div class="line">    &#125;);</div><div class="line">    return _instance;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (instancetype)init &#123;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        _instance = [super init];</div><div class="line">        AFNetworkReachabilityManager *manager = [AFNetworkReachabilityManager sharedManager];</div><div class="line">        [manager startMonitoring];</div><div class="line">        [manager setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) &#123;</div><div class="line">            switch (status) &#123;</div><div class="line">                case AFNetworkReachabilityStatusUnknown:</div><div class="line">                &#123;</div><div class="line">                    // 位置网络</div><div class="line">                    NSLog(@&quot;位置网络&quot;);</div><div class="line">                &#125;</div><div class="line">                    break;</div><div class="line">                case AFNetworkReachabilityStatusNotReachable:</div><div class="line">                &#123;</div><div class="line">                    // 无法联网</div><div class="line">                    NSLog(@&quot;无法联网&quot;);</div><div class="line">                &#125;</div><div class="line">                    break;</div><div class="line">                case AFNetworkReachabilityStatusReachableViaWiFi:</div><div class="line">                &#123;</div><div class="line">                    // 手机自带网络</div><div class="line">                    NSLog(@&quot;当前使用的是2G/3G/4G网络&quot;);</div><div class="line">                &#125;</div><div class="line">                    break;</div><div class="line">                case AFNetworkReachabilityStatusReachableViaWWAN:</div><div class="line">                &#123;</div><div class="line">                    // WIFI</div><div class="line">                    NSLog(@&quot;当前在WIFI网络下&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    return _instance;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark -- GET请求 --</div><div class="line">- (void)getWithURLString:(NSString *)URLString</div><div class="line">              parameters:(id)parameters</div><div class="line">                 success:(void (^)(id responseObject))success</div><div class="line">                 failure:(void (^)(NSError *error))failure &#123;</div><div class="line">    </div><div class="line">    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line">    /**</div><div class="line">     *  可以接受的类型</div><div class="line">     */</div><div class="line">    manager.responseSerializer = [AFHTTPResponseSerializer serializer];</div><div class="line">    /**</div><div class="line">     *  请求队列的最大并发数</div><div class="line">     */</div><div class="line">//    manager.operationQueue.maxConcurrentOperationCount = 5;</div><div class="line">    /**</div><div class="line">     *  请求超时的时间</div><div class="line">     */</div><div class="line">    manager.requestSerializer.timeoutInterval = 30;</div><div class="line">    [manager GET:URLString parameters:nil progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</div><div class="line">        if (success) &#123;</div><div class="line">            success(responseObject);</div><div class="line">        &#125;</div><div class="line">    &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</div><div class="line">        if (failure) &#123;</div><div class="line">            failure(error);</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark -- POST请求 --</div><div class="line">- (void)postWithURLString:(NSString *)URLString</div><div class="line">               parameters:(id)parameters</div><div class="line">                  success:(void (^)(id))success</div><div class="line">                  failure:(void (^)(NSError *))failure &#123;</div><div class="line">    </div><div class="line">    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line">    manager.responseSerializer = [AFHTTPResponseSerializer serializer];</div><div class="line">    [manager POST:URLString parameters:parameters progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</div><div class="line">        if (success) &#123;</div><div class="line">            success(responseObject);</div><div class="line">        &#125;</div><div class="line">    &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</div><div class="line">        if (failure) &#123;</div><div class="line">            failure(error);</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark -- POST/GET网络请求 --</div><div class="line">- (void)requestWithURLString:(NSString *)URLString</div><div class="line">                  parameters:(id)parameters</div><div class="line">                        type:(HttpRequestType)type</div><div class="line">                     success:(void (^)(id))success</div><div class="line">                     failure:(void (^)(NSError *))failure &#123;</div><div class="line">    </div><div class="line">    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line">    manager.responseSerializer = [AFHTTPResponseSerializer serializer];</div><div class="line">    switch (type) &#123;</div><div class="line">        case HttpRequestTypeGet:</div><div class="line">        &#123;</div><div class="line">            [manager GET:URLString parameters:nil progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</div><div class="line">                if (success) &#123;</div><div class="line">                    success(responseObject);</div><div class="line">                &#125;</div><div class="line">            &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</div><div class="line">                if (failure) &#123;</div><div class="line">                    failure(error);</div><div class="line">                &#125;</div><div class="line">            &#125;];</div><div class="line">        &#125;</div><div class="line">            break;</div><div class="line">        case HttpRequestTypePost:</div><div class="line">        &#123;</div><div class="line">            [manager POST:URLString parameters:parameters progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</div><div class="line">                if (success) &#123;</div><div class="line">                    success(responseObject);</div><div class="line">                &#125;</div><div class="line">            &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</div><div class="line">                if (failure) &#123;</div><div class="line">                    failure(error);</div><div class="line">                &#125;</div><div class="line">            &#125;];</div><div class="line">        &#125;</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)uploadWithURLString:(NSString *)URLString parameters:(id)parameters uploadParam:(NSArray&lt;UploadParam *&gt; *)uploadParams success:(void (^)())success failure:(void (^)(NSError *))failure &#123;</div><div class="line">    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line">    manager.responseSerializer = [AFHTTPResponseSerializer serializer];</div><div class="line">    [manager POST:URLString parameters:parameters constructingBodyWithBlock:^(id&lt;AFMultipartFormData&gt;  _Nonnull formData) &#123;</div><div class="line">        for (UploadParam *uploadParam in uploadParams) &#123;</div><div class="line">            [formData appendPartWithFileData:uploadParam.data name:uploadParam.name fileName:uploadParam.filename mimeType:uploadParam.mimeType];</div><div class="line">        &#125;</div><div class="line">    &#125; progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</div><div class="line">        if (success) &#123;</div><div class="line">            success(responseObject);</div><div class="line">        &#125;</div><div class="line">    &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</div><div class="line">        if (failure) &#123;</div><div class="line">            failure(error);</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - 下载数据</div><div class="line">- (void)downLoadWithURLString:(NSString *)URLString parameters:(id)parameters progerss:(void (^)())progress success:(void (^)())success failure:(void (^)(NSError *))failure &#123;</div><div class="line">    AFHTTPSessionManager *manager = [[AFHTTPSessionManager alloc] initWithSessionConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration]];</div><div class="line">    NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:URLString]];</div><div class="line">    NSURLSessionDownloadTask *downLoadTask = [manager downloadTaskWithRequest:request progress:^(NSProgress * _Nonnull downloadProgress) &#123;</div><div class="line">        if (progress) &#123;</div><div class="line">            progress();</div><div class="line">        &#125;</div><div class="line">    &#125; destination:^NSURL * _Nonnull(NSURL * _Nonnull targetPath, NSURLResponse * _Nonnull response) &#123;</div><div class="line">        return targetPath;</div><div class="line">    &#125; completionHandler:^(NSURLResponse * _Nonnull response, NSURL * _Nullable filePath, NSError * _Nullable error) &#123;</div><div class="line">        if (failure) &#123;</div><div class="line">            failure(error);</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">    [downLoadTask resume];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<h4 id="2、使用方法"><a href="#2、使用方法" class="headerlink" title="2、使用方法"></a>2、使用方法</h4><ul>
<li>首先下载AFNetworking 然后在需要使用的类中，导入如下个头文件。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &quot;HttpRequest.h&quot;</div></pre></td></tr></table></figure>
<ul>
<li>GET请求网络数据方式：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[[HttpRequest sharedInstance] getWithURLString:@&quot;GET请求的URL&quot; parameters:nil success:^(id responseObject) &#123;</div><div class="line">       id json = [NSJSONSerialization JSONObjectWithData:responseObject options:0 error:nil];</div><div class="line">       NSLog(@&quot;%@&quot;,json);</div><div class="line">   &#125; failure:^(NSError *error) &#123;</div><div class="line">       NSLog(@&quot;请求失败&quot;);</div><div class="line">   &#125;];</div></pre></td></tr></table></figure>
<ul>
<li>POST请求网络数据方式：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">NSMutableDictionary *params = [NSMutableDictionary dictionary];</div><div class="line">   params[@&quot;page&quot;] = @&quot;1&quot;;</div><div class="line">   params[@&quot;number&quot;] = @&quot;20&quot;;</div><div class="line">   [[HttpRequest sharedInstance] postWithURLString:@&quot;POST请求的URL&quot; parameters:params success:^(id responseObject) &#123;</div><div class="line">       id json = [NSJSONSerialization JSONObjectWithData:responseObject options:0 error:nil];</div><div class="line">       NSLog(@&quot;-------%@&quot;,json);</div><div class="line">   &#125; failure:^(NSError *error) &#123;</div><div class="line">       NSLog(@&quot;-------请求失败&quot;);</div><div class="line">   &#125;];</div></pre></td></tr></table></figure>
<ul>
<li>GET、POST请求二合一：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> UIImageView *iamgeV = [[UIImageView alloc] init];</div><div class="line">    iamgeV.frame = [UIScreen mainScreen].bounds;</div><div class="line">    [self.view addSubview:iamgeV];</div><div class="line">    [[HttpRequest sharedInstance] requestWithURLString:@&quot;图片 URL&quot; parameters:nil type:HttpRequestTypeGet success:^(id responseObject) &#123;</div><div class="line">        </div><div class="line">        iamgeV.image = [UIImage imageWithData:responseObject];</div><div class="line">        </div><div class="line">    &#125; failure:^(NSError *error) &#123;</div><div class="line">        NSLog(@&quot;请求错误&quot;);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;p&gt;&lt;code&gt;AFNetworking&lt;/code&gt;是一个非常方便的网络请求库，可以轻松实现各种网络请求，比如经常使用的GET请求、POST请求，以及上传多张图片等;&lt;/p&gt;
&lt;p&gt;通常来说，&lt;code&gt;AFNetworking&lt;/code&gt;已经是高度封装的了，在用到AFNetworking发请求的类里，我们直接可以调用.&lt;br&gt;&lt;code&gt;AFNetworking&lt;/code&gt;的API。但是，在实际开发中，我们常常将设备、版本、和账户等信息，在接口中作为参数集中提交&lt;br&gt;到服务器。而网络请求异常等信息，也希望集中处理。这时，在每个调用&lt;code&gt;AFNetworking&lt;/code&gt;的地方分别处理就比较麻烦,&lt;br&gt;单独封装一个网略请求类，做集中处理，会跟方便管理，也便于复用和扩展。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="网络请求" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
    
    
      <category term="AFNetworking" scheme="http://yoursite.com/tags/AFNetworking/"/>
    
      <category term="网络请求-" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>App上架流程</title>
    <link href="http://yoursite.com/2016/04/05/App%E4%B8%8A%E6%9E%B6%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2016/04/05/App上架流程/</id>
    <published>2016-04-05T12:46:25.000Z</published>
    <updated>2016-08-31T14:01:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、创建App-ID"><a href="#一、创建App-ID" class="headerlink" title="一、创建App ID"></a><strong>一、创建App ID</strong></h3><blockquote>
<p>废话不多说,直接上教程:</p>
</blockquote>
<p>1.打开苹果开发者官网，点击“Account”登录会员中心。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-9d8d44cb022c9c4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5EBBB906-E192-4D9E-8A1E-0E633A67825E.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-a5eaa3dcc777a7e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="C9A14418-D457-4AD5-825E-A748609F69B9.png"></p>
<hr>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-bd66b2d49c42d54d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="A2BD880B-BB19-4B5C-94FD-638768DBCA61.png"></p>
<p>2.填写信息创建app ID</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-b5151a2cdd8304ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="A2BD880B-BB19-4B5C-94FD-638768DBCA61.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-a7b6c84b378a68ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="847C4711-99BC-4B96-AD58-0A129C03E43E.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-65dbcde96c0ace1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DDE0EB86-7699-48EB-8B54-CD42A2DCA75D.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-fc6e0d2c26fac89a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="D41D2391-1EEE-4C25-A0B5-78A8F92245C5.png"></p>
<h3 id="二、创建证书请求文件（CSR文件）"><a href="#二、创建证书请求文件（CSR文件）" class="headerlink" title="二、创建证书请求文件（CSR文件）"></a><strong>二、创建证书请求文件（CSR文件）</strong></h3><p>CRS文件主要用于 绑定你的电脑的</p>
<p>1 点开LaunchPad，在其他中找到打开钥匙串访问</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-4b86e5534b621759.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="85DEED3B-36D9-44D7-AE57-8F90A9F59665.png"></p>
<p>2 点击电脑左上角的钥匙串访问–证书助理–从证书颁发机构请求证书</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-d661f4590afac773.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3542A329-7B4B-4D0B-B087-AA957245665D.png"></p>
<p>3 出现如下界面，选择存储到磁盘，点击继续</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-8a83c1778dc1464a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="9174341D-DD72-49C4-A5E2-52EC2FDEA891.png"></p>
<p>4 选择存储到桌面，存储</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-16c8248f272d0b53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AC45F96B-35AC-4C16-838A-AFF74425EF1D.png"></p>
<p>5 点击完成</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-c178cefbd8d5c46b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="8F7E44AC-2D2B-4745-816A-DD7494A60E3F.png"></p>
<p>6 在桌面上看到下面的文件，证书请求文件完成</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-7c5a79c0eaa6ad2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="BEE1606D-90C8-4EA6-B02E-8BA91DAE0121.png"></p>
<h3 id="三、创建发布证书-CER文件"><a href="#三、创建发布证书-CER文件" class="headerlink" title="三、创建发布证书 (CER文件)"></a><strong>三、创建发布证书 (CER文件)</strong></h3><p>1 找到Certificates ，点击All，然后点击右上角 + 号</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-26e4e6d9860a8d95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="89DA89AB-D558-4D0B-8315-721D09EA9C65.png"></p>
<p>2 点击App Store and Ad Hoc</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-387ac62ede241a41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="0E0993A2-35D6-43D1-8F3F-997FEEA0F2E0.png"></p>
<ul>
<li>发布证书和开发者证书需要分别创建，操作两次，开发者证书用于真机调试，发布证书用于提交到AppStore。</li>
</ul>
<ol>
<li>点击Continue</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-65440a3acd8e8872.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="FC1BC9F1-2BE4-4FE1-8585-DE55A3F38453.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-df5b599b5ef6f8c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="72A0DE52-A6E2-4A77-BDDD-88FC5E5A27CD.png"></p>
<ol>
<li>点击choose File.. 选择创建好的证书请求文件：CertificateSigningRequest.certSigningRequest 文件，点击Generate</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-e49b11a055bdc979.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="490D9D54-A5C7-4CA2-96AE-F1408744E977.png"></p>
<ol>
<li>点击Download下载创建好的发布证书（cer后缀的文件），然后点击Done，你创建的发布证书就会存储在帐号中。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-d8f0fb04b87fa247.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="E3C6D120-6DFC-4234-9CAF-116E4C2AE977.png"></p>
<ol>
<li>双击安装。如果安装不上，可以直接将证书文件拖拽到钥匙串访问的列表中</li>
</ol>
<ul>
<li>重点: 一般一个开发者帐号创建一个发布证书就够了，如果以后需要在其他电脑上上架App，只需要在钥匙串访问中创建p12文件，把p12文件安装到其他电脑上。这相当于给予了其他电脑发布App的权限。</li>
</ul>
<h3 id="四、创建Provisioning-Profiles文件"><a href="#四、创建Provisioning-Profiles文件" class="headerlink" title="四、创建Provisioning Profiles文件"></a><strong>四、创建Provisioning Profiles文件</strong></h3><p>1.找到Provisioning Profiles ，点击All，然后点击右上角 + 号</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-2c5322dabd2bae24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="08699135-9E95-4683-8D8E-5A44B6248A36.png"></p>
<p>2.选择App Store，点击Continue</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-ce9b440d0ba8b98c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="D295FDF8-4863-4C59-AB80-D59A38D2E9AA.png"></p>
<p>该流程也需要进行两次，分别创建开发用的PP证书和发布的PP证书。</p>
<p>3.在App ID 这个选项栏里面找到你刚刚创建的：App IDs（Bundle ID） 类型的套装，点击Continue</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-aa3cc341632c8572.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AD5B5730-2942-453E-BB33-4976F2BDCB33.png"></p>
<p>4.选择你刚创建的发布证书（或者生成p12文件的那个发布证书），点击Continue</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-c2a1a949df10014d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AD5B5730-2942-453E-BB33-4976F2BDCB33.png"></p>
<p>5.在Profile Name栏里输入一个名字（这个是PP文件的名字，可随便输入，在这里我用工程名字，便于分别），然后点击Generate</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-f444452a012fd888.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2276D9DE-669A-45BB-B95F-10F5C00613B2.png"></p>
<p>注意：wildCard格式的证书没有推送，PassCard等服务的应用，慎重选择。因为PP证书的开发者证书需要真机调试，所以我们需要绑定真机，这里因为之前添加过一些设备，所以这里就可以直接全选添加，如果没有的话，需要将真机的udid复制出来在此添加。在发布PP文件中，是没有这一步的。</p>
<p>6.Download生成的PP文件，然后点击Done</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-b3dfa5c658ec789e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="B8A9CC7F-3128-41FB-ACA9-2FC5D0EED937.png"></p>
<p>双击就添加到Xcode中，这样在真机调试或者发布时，就可以分别有不同的PP证书与其对应。其实可以不用下载保存</p>
<h3 id="五、在App-Store创建应用"><a href="#五、在App-Store创建应用" class="headerlink" title="五、在App Store创建应用"></a><strong>五、在App Store创建应用</strong></h3><p>1、回到Account，点击iTunes Connect</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-ad0db45b17eb31d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="D6421136-5750-4C0F-82DB-33117D32E35A.png"></p>
<p>2、点击我的App</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-34ca70de50dc7862.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="8E08B348-1A7D-49B6-9DA7-4CA7BEFB320E.png"></p>
<p>3、点击新建 iOSApp</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-b3c9662e31f77683.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="46183125-BCF8-48BA-BBAA-4E9252FF8D09.png"></p>
<p>4、依次按提示填入对应信息，然后点击创建</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-29d93bdf0b027513.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="BA8C6FD1-8134-467C-99E5-B01007A5A534.png"></p>
<p>5、依次把不同尺寸的App截图拉入到对应的里面</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-ad427096806e3ddb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="E98D2026-558C-49AF-B8D6-48CC7D0D2F3A.png"></p>
<p>6、填入App简介</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-1f399634ff7beed9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CC594E6B-B08C-4058-80F8-45E96BA69B87.png"></p>
<p>7、按提示依次输入</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-e30f4b648d12dc5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="B26CEECC-E929-40E2-AA3D-2A3D50E94893.png"></p>
<p>此时这个构建版本还没有生成，我们先把基本信息填写完毕，然后再进入Xcode中把项目打包发送到过来。注意：填写完一定要点击右上角的保存。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-8fb7492ec3b3c431.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="7E8C0952-3929-4997-882C-E286BEED87B7.png"></p>
<p>不要忘记填写测试账号，否则会被拒的，而且一定要跟服务器同事说好，不要删除测试账号，否则同样被拒（联系号码 一定要+ 86 如：+86 13720329661）</p>
<h3 id="六、打包上架"><a href="#六、打包上架" class="headerlink" title="六、打包上架"></a><strong>六、打包上架</strong></h3><p>在Xcode中打包工程找到你刚刚下载的发布证书（后缀为.cer）或者p12文件，和PP文件，双击，看起来没反应，但是他们已经加入到你的钥匙串中。如果之前步骤已操作过，可省略此步。</p>
<p>1、打开Xcode，配置项目环境，点击+可以选择Add Apple ID；点击View Details可以查看该Apple Id下的Certificates和Provisioning Profile证书文件，在这里你可以点击下载。在项目Targets下的Identity中，Team选择对应的Apple ID 即可。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-09e5414b357caf97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="BD4D4576-66A5-486D-A002-0C4D710D6B42.png"></p>
<p>特别注意： 这里填写的Apple ID 不是你自己手机上创建的Apple ID 一定要是 开发者账号的 账号和密码 （~QAQ~ 我就在这里被坑过）</p>
<p>2、选择模拟器为iOS Device，按照下图提示操作</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-410691b972a3a87d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="D9F66DE2-0F96-4102-97A2-F1EB35868779.png"></p>
<p>3、修改.plist文件，两个.plist文件都要修改</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-64c92fb1cdbf2486.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DCB4BC31-790B-4E3E-8738-83DB0BC072FD.png"></p>
<p>4、Archive在线打包，在真机状态下选择Product——&gt;Archive，如果不是真机状态下，Archive会是灰色不可用的)。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-71d09e93203a943d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="283FC7B0-7BDE-4644-B7D1-C11F2226033D.png"></p>
<p>5、打包之后会生成一个 ipa文件 ，然后返回我的App~~在构建版本处，点击Application Loader 就会将其下载下来，然后通过该软件把ipa文件上传到 appstore上。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-a02d37427b0bcad5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="008C3652-02C8-4902-850C-CDA8F49E7834.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-89e8027ca4dc1758.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="95CF2DAB-49BB-492A-8326-A50AF9E028E0.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-5d83e7d515fdf8a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5A3D1062-3DFD-4CB6-B08A-8EB6D85EE0D9.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-f7a2ab5d838a538f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="28B4FF1D-D4FD-49B6-841D-6B2323C1A1DE.png"></p>
<p>打包过程中 会出现的问题</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-e9e9e8c79acbf517.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="07CDA67A-0733-4488-8C93-641317A05BDC.png"></p>
<p>解决方案：iOS- 打包时 UUID出错的解决方案</p>
<p>application Loader 上传出现的错误</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-2b0dc48cd89bcf63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="BE8406B4-8C0A-4288-A9A5-CA666E671586.png"></p>
<p>6.发送成功后返回到我的App，刷新页面，在构建版本处就会有个 + 号，点击 + 号把发送过来的程序添加上去就行了</p>
<p>7.提交审核</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、创建App-ID&quot;&gt;&lt;a href=&quot;#一、创建App-ID&quot; class=&quot;headerlink&quot; title=&quot;一、创建App ID&quot;&gt;&lt;/a&gt;&lt;strong&gt;一、创建App ID&lt;/strong&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;废话不多说,直接上教程:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.打开苹果开发者官网，点击“Account”登录会员中心。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1930979-9d8d44cb022c9c4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;5EBBB906-E192-4D9E-8A1E-0E633A67825E.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1930979-a5eaa3dcc777a7e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;C9A14418-D457-4AD5-825E-A748609F69B9.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="AppStore" scheme="http://yoursite.com/categories/AppStore/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="AppStore" scheme="http://yoursite.com/tags/AppStore/"/>
    
      <category term="上架流程" scheme="http://yoursite.com/tags/%E4%B8%8A%E6%9E%B6%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Apple Pay支付功能集成</title>
    <link href="http://yoursite.com/2016/03/18/Apple%20Pay%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD%E9%9B%86%E6%88%90/"/>
    <id>http://yoursite.com/2016/03/18/Apple Pay支付功能集成/</id>
    <published>2016-03-18T12:46:25.000Z</published>
    <updated>2016-08-31T14:22:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是Apple-Pay"><a href="#什么是Apple-Pay" class="headerlink" title="什么是Apple Pay"></a>什么是Apple Pay</h3><p><strong>Apple Pay</strong>，是苹果公司在2014苹果秋季新品发布会上发布的一种基于<strong>NFC</strong>的手机支付功能，于2014年10月20日在美国正式上线。2016年2月18日中国上线。</p>
<h3 id="Apple-Pay支持的设备"><a href="#Apple-Pay支持的设备" class="headerlink" title="Apple Pay支持的设备"></a>Apple Pay支持的设备</h3><p><strong>iPhone系列</strong>：iPhone 6、iPhone6 Plus、iPhone 6s、iPhone 6s Plus、iPhone SE</p>
<p><strong>iPad系列</strong>：iPad Air 2、iPad mini 3、iPad mini 4、iPad Pro</p>
<p><strong>Apple Watch</strong></p>
<p><strong>注意</strong>：<code>iPhone 5</code>和<code>iPhone 5s</code>本身并不支持，而是连接到它们的<code>Apple Watch</code>可以用，因为5系列的手机不带<strong>NFC</strong>。</p>
<hr>
<a id="more"></a>
<h3 id="Apple-Pay系统要求"><a href="#Apple-Pay系统要求" class="headerlink" title="Apple Pay系统要求"></a>Apple Pay系统要求</h3><p>iOS需升级到9.2及以上，Watch OS需要2.1或更高版本。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-6b38a8f6d6c96392.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ApplePay1.png"></p>
<hr>
<h3 id="Apple-Pay集成"><a href="#Apple-Pay集成" class="headerlink" title="Apple Pay集成"></a>Apple Pay集成</h3><p><a href="https://developer.apple.com/apple-pay/get-started/cn/" target="_blank" rel="external">Apple Pay官方文档</a></p>
<hr>
<p><strong>官网证书</strong></p>
<p>1.登录开发者账号，添加App ID（记得勾选下面的Apple Pay）</p>
<p>2.添加Merchant IDs</p>
<p>3.将创建的App ID里面的Apple Pay设置自己的Merchant IDs</p>
<p>4.检查App ID里面的Apple Pay的两个选项是否都为绿色</p>
<p>5.创建Merchant证书，绑定App ID并安装</p>
<p><strong>设置 Xcode</strong></p>
<p>在Xcode中，将<code>Capabilities</code>中的Apple Pay开启</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-2f78bdc3fbe1a0a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ApplePay3.png"></p>
<p>中间会生成你设置的App ID，将其勾选。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-2d8e0e5f69befde2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3CE5FADB-B998-45F8-8445-586EE856BD33.png"></p>
<p><strong>代码实现</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &lt;PassKit/PassKit.h&gt;</div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    // Do any additional setup after loading the view, typically from a nib.</div><div class="line">    </div><div class="line">    //1.是否支持Apple Pay</div><div class="line">    if (![PKPaymentAuthorizationViewController canMakePayments])</div><div class="line">    &#123;</div><div class="line">        NSLog(@&quot;不支持Apple Pay&quot;);</div><div class="line">        // 判断是否添加了银行卡</div><div class="line">    &#125;else if(![PKPaymentAuthorizationViewController canMakePaymentsUsingNetworks:@[PKPaymentNetworkVisa,PKPaymentNetworkChinaUnionPay]])</div><div class="line">    &#123;</div><div class="line">        //跳转到添加银行卡</div><div class="line">        PKPaymentButton * btn = [PKPaymentButton buttonWithType:PKPaymentButtonTypeSetUp style:PKPaymentButtonStyleWhiteOutline];</div><div class="line">        btn.frame  = CGRectMake(100, 100, 100, 20);</div><div class="line">        [btn addTarget:self  action:@selector(jump) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">        [self.view addSubview:btn];</div><div class="line">    &#125;else</div><div class="line">    &#123;</div><div class="line">        //创建购买按钮</div><div class="line">        PKPaymentButton * btn = [PKPaymentButton buttonWithType:PKPaymentButtonTypeBuy style:PKPaymentButtonStyleBlack];</div><div class="line">        btn.frame  = CGRectMake(100, 100, 100, 20);</div><div class="line">        [btn addTarget:self  action:@selector(buy) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">        [self.view addSubview:btn];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//跳转添加银行卡页面</div><div class="line">-(void)jump</div><div class="line">&#123;</div><div class="line">    PKPassLibrary * pl = [[PKPassLibrary alloc]init];</div><div class="line">    [pl openPaymentSetup];</div><div class="line">    NSLog(@&quot;跳转设置界面&quot;);</div><div class="line">&#125;</div><div class="line">//购买</div><div class="line">-(void)buy</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;开始购买&quot;);</div><div class="line">    //1.创建支付请求</div><div class="line">    PKPaymentRequest * request = [[PKPaymentRequest alloc]init];</div><div class="line">    //2.配置商家ID</div><div class="line">    request.merchantIdentifier = @&quot;yimouelng.com&quot;;</div><div class="line">    //3.配置货币代码和国家代码</div><div class="line">    request.countryCode = @&quot;CN&quot;;</div><div class="line">    request.currencyCode = @&quot;CNY&quot;;</div><div class="line">    //4.配置请求支持的支付网络</div><div class="line">    request.supportedNetworks = @[PKPaymentNetworkVisa,PKPaymentNetworkChinaUnionPay];</div><div class="line">    //5.配置处理方式</div><div class="line">    request.merchantCapabilities = PKMerchantCapability3DS;</div><div class="line">    //6.配置购买的商品列表 注意支付列表最后一个代表总和 注意名称和价钱</div><div class="line">    NSDecimalNumber * num = [NSDecimalNumber decimalNumberWithString:@&quot;998&quot;];</div><div class="line">    PKPaymentSummaryItem * item = [PKPaymentSummaryItem summaryItemWithLabel:@&quot;商品&quot; amount:num];</div><div class="line">    request.paymentSummaryItems  = @[item];</div><div class="line">    </div><div class="line">    </div><div class="line">    //附加选项 --------</div><div class="line">    request.requiredBillingAddressFields = PKAddressFieldAll;//添加收货地址</div><div class="line">    request.requiredShippingAddressFields = PKAddressFieldAll;//运输地址</div><div class="line">    </div><div class="line">    //添加快递</div><div class="line">     NSDecimalNumber * num2 = [NSDecimalNumber decimalNumberWithString:@&quot;998&quot;];</div><div class="line">    PKShippingMethod * method = [PKShippingMethod summaryItemWithLabel:@&quot;顺丰&quot; amount:num2];</div><div class="line">    method.identifier =@&quot;sf&quot;;</div><div class="line">    method.detail = @&quot;货到付款&quot;;//备注</div><div class="line">    request.shippingMethods =@[method];</div><div class="line">    </div><div class="line">    </div><div class="line">    request.applicationData = [@&quot;id = 1&quot; dataUsingEncoding:NSUTF8StringEncoding];//添加附加数据</div><div class="line">    </div><div class="line">    //7.验证用户的支付请求并跳转支付页面</div><div class="line">    PKPaymentAuthorizationViewController * auth = [[PKPaymentAuthorizationViewController alloc]initWithPaymentRequest:request];</div><div class="line">    [self presentViewController:auth animated:YES completion:nil];</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div><div class="line">- (void)didReceiveMemoryWarning &#123;</div><div class="line">    [super didReceiveMemoryWarning];</div><div class="line">    // Dispose of any resources that can be recreated.</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是Apple-Pay&quot;&gt;&lt;a href=&quot;#什么是Apple-Pay&quot; class=&quot;headerlink&quot; title=&quot;什么是Apple Pay&quot;&gt;&lt;/a&gt;什么是Apple Pay&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Apple Pay&lt;/strong&gt;，是苹果公司在2014苹果秋季新品发布会上发布的一种基于&lt;strong&gt;NFC&lt;/strong&gt;的手机支付功能，于2014年10月20日在美国正式上线。2016年2月18日中国上线。&lt;/p&gt;
&lt;h3 id=&quot;Apple-Pay支持的设备&quot;&gt;&lt;a href=&quot;#Apple-Pay支持的设备&quot; class=&quot;headerlink&quot; title=&quot;Apple Pay支持的设备&quot;&gt;&lt;/a&gt;Apple Pay支持的设备&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;iPhone系列&lt;/strong&gt;：iPhone 6、iPhone6 Plus、iPhone 6s、iPhone 6s Plus、iPhone SE&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;iPad系列&lt;/strong&gt;：iPad Air 2、iPad mini 3、iPad mini 4、iPad Pro&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Apple Watch&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;code&gt;iPhone 5&lt;/code&gt;和&lt;code&gt;iPhone 5s&lt;/code&gt;本身并不支持，而是连接到它们的&lt;code&gt;Apple Watch&lt;/code&gt;可以用，因为5系列的手机不带&lt;strong&gt;NFC&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="支付" scheme="http://yoursite.com/categories/%E6%94%AF%E4%BB%98/"/>
    
    
      <category term="Apple Pay" scheme="http://yoursite.com/tags/Apple-Pay/"/>
    
      <category term="支付" scheme="http://yoursite.com/tags/%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>iOS 常用正则表达式</title>
    <link href="http://yoursite.com/2015/08/15/iOS%20%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/08/15/iOS 常用正则表达式/</id>
    <published>2015-08-15T12:46:25.000Z</published>
    <updated>2016-08-31T08:48:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式用于字符串处理、表单验证等场合，实用高效。现将一些常用的表达式收集于此，以备不时之需。<br><a id="more"></a></p>
<p>###代码示例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+ (BOOL)isEmailAddress:(NSString*)candidate</div><div class="line">&#123;</div><div class="line">    NSString* emailRegex = @&quot;[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]&#123;2,4&#125;&quot;;</div><div class="line">    NSPredicate* emailTest = [NSPredicate predicateWithFormat:@&quot;self MATCHES %@&quot;, emailRegex];</div><div class="line">    return [emailTest evaluateWithObject:candidate];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">-(NSNumber *)asNumber;&#123;</div><div class="line">    NSString *regEx = @&quot;^-?\\d+.?\\d?&quot;;</div><div class="line">    NSPredicate * pred      = [NSPredicate predicateWithFormat:@&quot;self MATCHES %@&quot;, regEx];</div><div class="line">    BOOL isMatch            = [pred evaluateWithObject:self];</div><div class="line">    if (isMatch) &#123;</div><div class="line">        return [NSNumber numberWithDouble:[self doubleValue]];</div><div class="line">    &#125;</div><div class="line">    return nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">/摘自NSString+BeeExtension.mm</div><div class="line">- (BOOL)isUserName</div><div class="line">&#123;</div><div class="line">    NSString *      regex = @&quot;(^[A-Za-z0-9]&#123;3,20&#125;$)&quot;;</div><div class="line">    NSPredicate *   pred = [NSPredicate predicateWithFormat:@&quot;self MATCHES %@&quot;, regex];</div><div class="line">    </div><div class="line">    return [pred evaluateWithObject:self];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (BOOL)isPassword</div><div class="line">&#123;</div><div class="line">    NSString *      regex = @&quot;(^[A-Za-z0-9]&#123;6,20&#125;$)&quot;;</div><div class="line">    NSPredicate *   pred = [NSPredicate predicateWithFormat:@&quot;self MATCHES %@&quot;, regex];</div><div class="line">    </div><div class="line">    return [pred evaluateWithObject:self];  </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (BOOL)isEmail</div><div class="line">&#123;</div><div class="line">    NSString *      regex = @&quot;[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]&#123;2,4&#125;&quot;;</div><div class="line">    NSPredicate *   pred = [NSPredicate predicateWithFormat:@&quot;self MATCHES %@&quot;, regex];</div><div class="line">    </div><div class="line">    return [pred evaluateWithObject:self];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (BOOL)isUrl</div><div class="line">&#123;</div><div class="line">    NSString *      regex = @&quot;http(s)?:\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w- .\\/?%&amp;=]*)?&quot;;</div><div class="line">    NSPredicate *   pred = [NSPredicate predicateWithFormat:@&quot;self MATCHES %@&quot;, regex];</div><div class="line">    </div><div class="line">    return [pred evaluateWithObject:self];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (BOOL)isTelephone</div><div class="line">&#123;</div><div class="line">    NSString * MOBILE = @&quot;^1(3[0-9]|5[0-35-9]|8[025-9])\\d&#123;8&#125;$&quot;;</div><div class="line">    NSString * CM = @&quot;^1(34[0-8]|(3[5-9]|5[017-9]|8[278])\\d)\\d&#123;7&#125;$&quot;;</div><div class="line">    NSString * CU = @&quot;^1(3[0-2]|5[256]|8[56])\\d&#123;8&#125;$&quot;;</div><div class="line">    NSString * CT = @&quot;^1((33|53|8[09])[0-9]|349)\\d&#123;7&#125;$&quot;;</div><div class="line">    NSString * PHS = @&quot;^0(10|2[0-5789]|\\d&#123;3&#125;)\\d&#123;7,8&#125;$&quot;;</div><div class="line">    NSPredicate *regextestmobile = [NSPredicate predicateWithFormat:@&quot;self MATCHES %@&quot;, MOBILE];</div><div class="line">    NSPredicate *regextestcm = [NSPredicate predicateWithFormat:@&quot;self MATCHES %@&quot;, CM];</div><div class="line">    NSPredicate *regextestcu = [NSPredicate predicateWithFormat:@&quot;self MATCHES %@&quot;, CU];</div><div class="line">    NSPredicate *regextestct = [NSPredicate predicateWithFormat:@&quot;self MATCHES %@&quot;, CT];</div><div class="line">    NSPredicate *regextestphs = [NSPredicate predicateWithFormat:@&quot;self MATCHES %@&quot;, PHS];</div><div class="line"></div><div class="line">    return  [regextestmobile evaluateWithObject:self]   ||</div><div class="line">            [regextestphs evaluateWithObject:self]      ||</div><div class="line">            [regextestct evaluateWithObject:self]       ||</div><div class="line">            [regextestcu evaluateWithObject:self]       ||</div><div class="line">            [regextestcm evaluateWithObject:self];</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正则表达式用于字符串处理、表单验证等场合，实用高效。现将一些常用的表达式收集于此，以备不时之需。&lt;br&gt;
    
    </summary>
    
      <category term="常用" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8/"/>
    
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods安装失败解决办法,重装</title>
    <link href="http://yoursite.com/2015/06/04/CocoaPods%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2015/06/04/CocoaPods安装/</id>
    <published>2015-06-04T12:34:12.000Z</published>
    <updated>2016-08-31T13:57:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>CocoaPods</strong>项目的源码在Github上管理。该项目开始于2011年8月12日，经过多年发展，现在已经成为iOS开发事实上的依赖管理标准工具。开发iOS项目不可避免地要使用第三方开源库，CocoaPods的出现使得我们可以节省设置和更新第三方开源库的时间会自动将这些第三方开源库的源码下载下来，并且为我的工程设置好相应的系统依赖和编译参数。</p>
<p>自己在安装<strong>CocoaPods</strong>的时候，报错, 报错, 报错… 各种搜教程，把解决方案写出来，供大家参考。</p>
<blockquote>
<p><strong>注意：</strong>在安装CocoaPods之前，首先要在本地安装好Ruby环境。</p>
</blockquote>
<p>  MAC系统自带<code>ruby环境</code>但是某些老旧机型可能ruby版本过低会报错,不过更新一下就好,而安装ruby需要<code>RVM</code> </p>
<hr>
<a id="more"></a>
<h3 id="步骤0-－-准备工作"><a href="#步骤0-－-准备工作" class="headerlink" title="步骤0 － 准备工作"></a>步骤0 － 准备工作</h3><p>首先需要切换到淘宝镜像服务器不然下面各个步奏会异常的卡顿(如果你曾经切换过可以查询出来)<br>查看CocoaPods版本:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod --version</div></pre></td></tr></table></figure>
<p> 移除现有Ruby默认源:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem sources --remove https://rubygems.org/</div></pre></td></tr></table></figure>
<p> 使用新的源</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem sources -a https://ruby.taobao.org/</div></pre></td></tr></table></figure>
<p> 验证新源是否替换成功:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem sources -l</div></pre></td></tr></table></figure>
<ul>
<li>输出<blockquote>
<p><strong><em> CURRENT SOURCES </em></strong><br><a href="https://ruby.taobao.org/" target="_blank" rel="external">https://ruby.taobao.org/</a></p>
</blockquote>
</li>
</ul>
<p>OK准备工作结束.</p>
<h3 id="步骤1-－-安装-RVM"><a href="#步骤1-－-安装-RVM" class="headerlink" title="步骤1 － 安装 RVM"></a>步骤1 － 安装 RVM</h3><p> RVM 是干什么的这里就不解释了(我也不知道什么玩意儿)，使用官方推荐的方法安装:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -L https://get.rvm.io | bash -s stable</div></pre></td></tr></table></figure>
<p>会出现,慢慢等吧<br><img src="http://upload-images.jianshu.io/upload_images/1930979-0a4a6c4effd8fbb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="92DB7B30-F9E3-4715-9ADA-A608194BA96B.png"></p>
<p>　　 期间可能会问你sudo管理员密码，以及自动通过homebrew安装依赖包，等待一段时间后就可以成功安装好 RVM。 然后，载入 RVM 环境（新开 Termal 就不用这么做了，会自动重新载入的）<br>　　<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.rvm/scripts/rvm</div></pre></td></tr></table></figure></p>
<p>　 检查一下是否安装正确<br>　<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm -v</div></pre></td></tr></table></figure></p>
<p>会输出:</p>
<blockquote>
<p>rvm 1.27.0 (latest) by Wayne E. Seguin <a href="&#109;&#97;&#x69;&#x6c;&#116;&#111;&#x3a;&#x77;&#97;&#x79;&#x6e;&#101;&#x65;&#115;&#x65;&#x67;&#117;&#x69;&#x6e;&#x40;&#103;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;">&#x77;&#97;&#x79;&#x6e;&#101;&#x65;&#115;&#x65;&#x67;&#117;&#x69;&#x6e;&#x40;&#103;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a>, Michal Papis <a href="&#x6d;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#109;&#112;&#x61;&#112;&#105;&#x73;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;">&#109;&#112;&#x61;&#112;&#105;&#x73;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;</a> [<a href="https://rvm.io/" target="_blank" rel="external">https://rvm.io/</a>]</p>
</blockquote>
<h3 id="步骤2-－-用-RVM-安装-Ruby-环境"><a href="#步骤2-－-用-RVM-安装-Ruby-环境" class="headerlink" title="步骤2 － 用 RVM 安装 Ruby 环境"></a>步骤2 － 用 RVM 安装 Ruby 环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm install 2.0.0</div></pre></td></tr></table></figure>
<p>这个网址有现有的Ruby版本信息: </p>
<blockquote>
<p><a href="https://bugs.ruby-lang.org/projects/ruby/wiki/ReleaseEngineering" target="_blank" rel="external">https://bugs.ruby-lang.org/projects/ruby/wiki/ReleaseEngineering</a><br>看自己喜好安装那个版本</p>
</blockquote>
<p>　 同样继续等待漫长的下载，编译过程，完成以后，Ruby, Ruby Gems 就安装好了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-d657a2d38f066855.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="FB59AF38-B8D0-471B-B432-01C285B7E51E.png"></p>
<h3 id="步骤3-－-设置-Ruby-版本"><a href="#步骤3-－-设置-Ruby-版本" class="headerlink" title="步骤3 － 设置 Ruby 版本"></a>步骤3 － 设置 Ruby 版本</h3><p>RVM 装好以后，需要执行下面的命令将指定版本的 Ruby 设置为系统默认版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm 2.0.0 --default</div></pre></td></tr></table></figure>
<p>同样，也可以用其他版本号，前提是你有用 rvm install 安装过那个版本 这个时候你可以测试是否正确</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -v</div></pre></td></tr></table></figure>
<p>　　</p>
<blockquote>
<p>输出 : ruby 2.0.0p247 (2013-06-27 revision 41674) [x86_64-darwin13.0.0]</p>
</blockquote>
<h3 id="步骤4-－-安装cocoa-pods"><a href="#步骤4-－-安装cocoa-pods" class="headerlink" title="步骤4 － 安装cocoa pods"></a>步骤4 － 安装cocoa pods</h3><p>第四步才是正题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install cocoa pods</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-32b2f2ce2c34e8da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="70856AFD-6F84-485E-B156-DB1C14F89FE9.png"></p>
<p>就安装完了. 这时你可以</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod search AFNetworking</div></pre></td></tr></table></figure>
<p>来检测一下 如果:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1930979-74a09ea3a10bd92f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5C7F3197-8167-4E31-9926-AA52EDDE8D35.png"></p>
<p>就说明成功了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;CocoaPods&lt;/strong&gt;项目的源码在Github上管理。该项目开始于2011年8月12日，经过多年发展，现在已经成为iOS开发事实上的依赖管理标准工具。开发iOS项目不可避免地要使用第三方开源库，CocoaPods的出现使得我们可以节省设置和更新第三方开源库的时间会自动将这些第三方开源库的源码下载下来，并且为我的工程设置好相应的系统依赖和编译参数。&lt;/p&gt;
&lt;p&gt;自己在安装&lt;strong&gt;CocoaPods&lt;/strong&gt;的时候，报错, 报错, 报错… 各种搜教程，把解决方案写出来，供大家参考。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;在安装CocoaPods之前，首先要在本地安装好Ruby环境。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  MAC系统自带&lt;code&gt;ruby环境&lt;/code&gt;但是某些老旧机型可能ruby版本过低会报错,不过更新一下就好,而安装ruby需要&lt;code&gt;RVM&lt;/code&gt; &lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="CocoaPods" scheme="http://yoursite.com/categories/CocoaPods/"/>
    
    
      <category term="CocoaPods" scheme="http://yoursite.com/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>第一篇文章</title>
    <link href="http://yoursite.com/2015/02/13/%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <id>http://yoursite.com/2015/02/13/第一篇/</id>
    <published>2015-02-13T12:46:25.000Z</published>
    <updated>2016-08-31T13:57:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="搭建-Hexo"><a href="#搭建-Hexo" class="headerlink" title="搭建 Hexo"></a>搭建 Hexo</h3><ul>
<li>用了6个小时搭建了自己的一个个人博客，其中遇到过很多坑。</li>
</ul>
<p><strong>什么是Hexo</strong><br>Hexo是快速、简洁且高效的博客框架；依靠Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。<br>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。<br>只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。<br>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p>
<blockquote>
<p>总之，Hexo是目前最高逼格的博客系统</p>
</blockquote>
<h3 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h3><p> 将知识整理出来的同时，自己的知识也得到了梳理，而且更加牢固，不仅帮助了别人，同时也帮助了自己，这种共赢何乐而不为。就像现在开源大潮一发不可收拾，各大互联网公司都把自己的很多技术都开源一样。这是一个良性循环，实现了众赢。提一下，我也是一个开源技术受益的开发者。对于我们从事技术工作的，同样也要营造这种良性循环。</p>
<hr>
<h3 id="反馈与建议"><a href="#反馈与建议" class="headerlink" title="反馈与建议"></a>反馈与建议</h3><ul>
<li>微博：<a href="http://weibo.com/codertyd" target="_blank" rel="external">@唐半仙丶</a></li>
<li>邮箱：<a href="&#109;&#97;&#x69;&#x6c;&#x74;&#x6f;&#58;&#x6c;&#x65;&#97;&#x64;&#101;&#x72;&#54;&#x38;&#x38;&#49;&#x40;&#x31;&#x36;&#x33;&#46;&#x63;&#x6f;&#109;">&#x6c;&#x65;&#97;&#x64;&#101;&#x72;&#54;&#x38;&#x38;&#49;&#x40;&#x31;&#x36;&#x33;&#46;&#x63;&#x6f;&#109;</a></li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;搭建-Hexo&quot;&gt;&lt;a href=&quot;#搭建-Hexo&quot; class=&quot;headerlink&quot; title=&quot;搭建 Hexo&quot;&gt;&lt;/a&gt;搭建 Hexo&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;用了6个小时搭建了自己的一个个人博客，其中遇到过很多坑。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="主题-" scheme="http://yoursite.com/tags/%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
</feed>
